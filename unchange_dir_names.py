# Re-creates the original directory tree
# 
# Just run this with no command line arguements in an otherwise empty all of the
# files generated by the 'chage_dir_names.py' script
#
#

import os

def main():

  # create file tuples (filename, file_size)
  file_tuples = []
  for f in os.listdir("./"):
    file_tuples.append((f,os.stat(f).st_size))

  # Sort files by size
  sorted_file_tuples = sorted(file_tuples, key=lambda f: f[1], reverse=True)
 
  # Last file is special
  last_file_tuple = sorted_file_tuples[0]

  # tmp tarball
  output_file = open("tmp.tar.gz", "wb");

  # Write the data files
  file_count = 0
  for f_tuple in sorted_file_tuples[1:]:
    file_count = file_count + 1
    print('processing file #'+str(file_count)+"/"+str(len(file_tuples)))
    
    filename = f_tuple[0]
    file_size = f_tuple[1]

    if file_size != 0:
      f = open(filename, "rb")
      byte = f.read(1)
      byte_arr = []
      while byte != "":
        byte_arr.append(byte)
        byte = f.read(1)
      output_file.write(bytearray(byte_arr))
      f.close()

    os.system("rm "+filename)

  # Write the last file
  print('processing last file')
  last_file = open(last_file_tuple[0], "rb")
  byte = last_file.read(1)
  byte_arr = []
  while byte != "":
    byte_arr.append(byte)
    byte = last_file.read(1)
  output_file.write(bytearray(byte_arr))

  last_file.close()
  os.system("rm "+last_file_tuple[0])

  # close output file (tar file)
  output_file.close()


  # untar the archive
  tar_cmd = 'tar -zxvf tmp.tar.gz '
  os.system(tar_cmd)

  # Cleanup
  os.system("rm tmp.tar.gz")

if __name__ == '__main__':
  main()
  print('')
